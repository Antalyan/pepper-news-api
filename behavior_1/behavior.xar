<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="100"><Box name="Set Language" id="2" localization="8" tooltip="Set the language of your robot for the current application. Your robot will speak and understand the selected language as long as your application has focus. Any following call to ALSpeechRecognition (Speech Reco. box for instance), ALTextToSpeech (Say box for instance) or ALDialog will use this language.&#x0A;" x="101" y="97"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.tts = ALProxy("ALTextToSpeech")
        except:
            self.logger.warn("ALTextToSpeech is not available, language setting cannot be applied to speech")
            self.tts = None

        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except:
            self.logger.warn("ALSpeechRecognition is not available, language setting cannot be applied to recognition")
            self.asr = None

        try:
            self.dialog = ALProxy("ALDialog")
        except:
            self.logger.warn("ALDialog is not available, language setting cannot be applied to dialog")
            self.dialog = None

    def onInput_onSet(self):
        lang = self.getParameter("Language")
        try:
            if self.asr:
                self.asr.setLanguage( self.getParameter("Language") )
            if self.tts:
                self.tts.setLanguage( self.getParameter("Language") )
            if self.dialog:
                self.dialog.setLanguage( self.getParameter("Language") )
            if self.tts is None and self.asr is None and self.dialog is None:
                raise RuntimeError("Cannot set language: neither ALTextToSpeech nor ALSpeechRecognition nor ALDialog is available.")
            self.onReady()
        except:
            error = "Language " + lang + " cannot be set."
            self.logger.warn(error)
            self.onError(error)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" /><Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" /><Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Error output:&#x0A;- triggered if the language asked cannot be set" id="4" /><Parameter name="Language" inherits_from_parent="0" content_type="3" value="Czech" default_value="English" custom_choice="1" tooltip="Set the language the robot speaks and understands." id="5"><Choice value="Arabic" /><Choice value="Brazilian" /><Choice value="Chinese" /><Choice value="Czech" /><Choice value="Danish" /><Choice value="Dutch" /><Choice value="English" /><Choice value="Finnish" /><Choice value="French" /><Choice value="German" /><Choice value="Greek" /><Choice value="Italian" /><Choice value="Japanese" /><Choice value="Korean" /><Choice value="MandarinTaiwan" /><Choice value="Norwegian" /><Choice value="Polish" /><Choice value="Portuguese" /><Choice value="Russian" /><Choice value="Spanish" /><Choice value="Swedish" /><Choice value="Turkish" /></Parameter><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Intro_News" id="3" localization="8" tooltip="" x="258" y="177"><dialogFile>../Intro_News/Intro_News.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="category" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Box name="Find_News" id="4" localization="8" tooltip="" x="504" y="256"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[# coding=utf-8
# WIP: next news, nothing available

import sys
sys.path.append('/opt/Softbank Robotics/Choregraphe Suite 2.5/lib/python2.7/site-packages')
import requests
import random
import re

# using NEWS_API from: https://newsapi.org
# personal key for usage of newsapi.org
API_KEY = "6e84adc2475543d4b695ca01eddbb920"

class CannotInitialize(Exception):
    pass

class CannotProcess(Exception):
    pass

class NoSource(Exception):
    pass


def is_noun_from_tag(tag):
    return "k1" in tag


def case_from_tag(tag):
    return re.search("c([0-9])", tag).group(1)


def reformat_sentences(text):
    if re.search(u"<.>(.*)</.>", text):
        text = re.search(u"<.>(.*)</.>", text).group(1)
    elif re.search(u"<.>(.*)", text):
        text = re.search(u"<.>(.*)", text).group(1)
    if re.search(u"(.*[?.!]).*\u2026", text):
        text = re.search(u"(.*[?.!]).*\u2026", text).group(1)
    if re.search(u"(.*[?.]).*[.]{3}", text):
        text = re.search(u"(.*[?.]).*[.]{3}", text).group(1)
    return text


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.tts.setLanguage('Czech')
        self.number = -1
        self.json = None

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, category):
        self.category = category
        self.onInput_repeatStart()

    def onInput_repeatStart(self):
        self.logger.debug("start")
        self.logger.info("category = {}".format(self.category))
        try:
            if not self.json:
                self.initialize_news()
        except CannotInitialize:
            self.logger.error("cannot load news")
            self.onError()
        while (self.choose_news() or self.number != self.limit_number):
            try:
                if not self.get_news()["description"]:
                    raise CannotChoose
                tmp = (u"Na internetu píšou o " + self.get_main_topic()).encode('utf-8')
                self.tts.say(tmp)
                self.logger.info("topic in vocal: {}".format(tmp))
                self.logger.debug("successful")
                self.logger.debug("end")
                self.onFirstStop()
                return
            except:
                self.logger.error("cannot get topic")
        self.logger.debug("end")
        self.logger.error("error: no matching news")
        self.onError()

    def onInput_boxWhole(self):
        self.logger.debug("start whole")
        desc = self.get_news_desc()
        self.logger.info(desc.encode('utf-8'))
        source = self.get_source()

        try:
            tabletService = session.service("ALTabletService")
            tabletService.enableWifi()
            tabletService.showWebview(self.get_url_image())
        except Exception:
            self.logger.error("cannot display image with url {}".format(self.get_url_image()))

        if not source:
            self.tts.say((u"Píšou tohle. " + desc).encode('utf-8'))
        else:
            self.tts.say((u"Na webu {} píšou. {}".format(source, desc)).encode('utf-8'))
        self.logger.debug("end whole")
        self.onFirstStop()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def initialize_news(self):
        url = ('http://newsapi.org/v2/top-headlines?'
                   'country=cz&'
                   'category={}&'
                   'apiKey={}'.format(self.category, API_KEY))
        self.logger.debug("url = {}".format(url))
        self.json = requests.get(url).json()
        if not self.json["articles"]:
            raise CannotInitialize(url)

    def choose_news(self):
        if self.number == -1:
            self.number = random.randint(0, len(self.json["articles"]) - 1)
            self.limit_number = (self.number - 1) % len(self.json["articles"])
            return True
        else:
            self.number = (self.number + 1) % len(self.json["articles"])
            return False

    def create_url(self, service, text):
        return u"https://nlp.fi.muni.cz/languageservices/service.py?call={}&lang=cs&output=json&text={}".format(service,text)

    # GETTERS

    def get_news(self):
        return self.json["articles"][self.number]

    def get_news_desc(self):
        return reformat_sentences(self.get_news()["description"])

    def get_source(self):
        try:
            tmp = self.json["articles"][self.number]["source"]["name"]
            self.logger.debug(tmp.encode('utf-8'))
            return tmp
        except KeyError:
            return ""

    def get_url_image(self):
        return self.get_news()["urlToImage"]

    # UTILITIES

    def test_membership(self, text):
        return requests.get(self.create_url("sholva", text)).json()

    def change_case(self, text, output_case, input_case=1, input_number=""):
        nlpurl = self.create_url("declension", text) + "&c1=c{}&c2=c{}&n=n{}".format(input_case, output_case, input_number)
        result = requests.get(nlpurl).json()
        self.logger.info(result.values())
        return result.values()[0]

    def get_main_phrases(self, text):
        nlpurl = self.create_url("phrases", text)
        return requests.get(nlpurl).json()

    def get_main_topic(self):
        nlpurl = self.create_url("topics", self.get_news_desc())
        topics = requests.get(nlpurl).json()
        try:
            topic = topics["response"][0]
            assert topic
        except:
            raise CannotProcess
        self.logger.info(topic.encode('utf-8'))
        phrase = self.get_main_phrases(topic)[0]
        input_number, input_case = re.search(u"k1.*n([A-Z])c(\d).*", phrase["Tag"]).groups()
        return self.change_case(phrase["Phrase"], 6, int(input_case), input_number)

    def cut_url(self):
        return self.get_news()["title"].split('-')[0]]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="boxWhole" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Input name="repeatStart" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Output name="onFirstStop" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" /><Output name="onError" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" /></Box><Box name="Additional Info" id="6" localization="8" tooltip="An example of multilanguage dialog implementation" x="739" y="190"><dialogFile>../AdditionalInfo/AdditionalInfo.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="playAGame" type="1" type_size="1" nature="2" inner="0" tooltip="stimulated using $playAGame=1 in qiChat script when User wants to play a game&#x0A;" id="5" /><Resource name="Speech" type="Lock" timeout="0" /><Resource name="Speech recognition" type="Lock" timeout="0" /></Box><Box name="Switch Case" id="1" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="904" y="202"><bitmap>media/images/box/interaction/choice.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("whole")):
			self.output_1(p)
		elif(p == self.typeConversion("next")):
			self.output_2(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]></content></script><pluginContent><keywords><keyword>&quot;whole&quot;</keyword><keyword>&quot;next&quot;</keyword><keyword></keyword></keywords></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" /><Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" /><Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" /><Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" /></Box><Box name="ErrorDialog" id="5" localization="8" tooltip="An example of multilanguage dialog implementation" x="878" y="382"><dialogFile>../ErrorDialog/ErrorDialog.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="playAGame" type="1" type_size="1" nature="2" inner="0" tooltip="stimulated using $playAGame=1 in qiChat script when User wants to play a game&#x0A;" id="5" /><Output name="again" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Resource name="Speech" type="Lock" timeout="0" /><Resource name="Speech recognition" type="Lock" timeout="0" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" /><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="7" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="3" /><Link inputowner="4" indexofinput="4" outputowner="1" indexofoutput="4" /><Link inputowner="4" indexofinput="5" outputowner="1" indexofoutput="5" /><Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="8" /><Link inputowner="4" indexofinput="5" outputowner="5" indexofoutput="6" /><Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="6" /><Link inputowner="1" indexofinput="2" outputowner="6" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>