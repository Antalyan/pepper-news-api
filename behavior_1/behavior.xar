<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="100"><Box name="Set Language" id="2" localization="8" tooltip="Set the language of your robot for the current application. Your robot will speak and understand the selected language as long as your application has focus. Any following call to ALSpeechRecognition (Speech Reco. box for instance), ALTextToSpeech (Say box for instance) or ALDialog will use this language.&#x0A;" x="110" y="80"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.tts = ALProxy("ALTextToSpeech")
        except:
            self.logger.warn("ALTextToSpeech is not available, language setting cannot be applied to speech")
            self.tts = None

        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except:
            self.logger.warn("ALSpeechRecognition is not available, language setting cannot be applied to recognition")
            self.asr = None

        try:
            self.dialog = ALProxy("ALDialog")
        except:
            self.logger.warn("ALDialog is not available, language setting cannot be applied to dialog")
            self.dialog = None

    def onInput_onSet(self):
        lang = self.getParameter("Language")
        try:
            if self.asr:
                self.asr.setLanguage( self.getParameter("Language") )
            if self.tts:
                self.tts.setLanguage( self.getParameter("Language") )
            if self.dialog:
                self.dialog.setLanguage( self.getParameter("Language") )
            if self.tts is None and self.asr is None and self.dialog is None:
                raise RuntimeError("Cannot set language: neither ALTextToSpeech nor ALSpeechRecognition nor ALDialog is available.")
            self.onReady()
        except:
            error = "Language " + lang + " cannot be set."
            self.logger.warn(error)
            self.onError(error)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" /><Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" /><Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Error output:&#x0A;- triggered if the language asked cannot be set" id="4" /><Parameter name="Language" inherits_from_parent="0" content_type="3" value="Czech" default_value="English" custom_choice="1" tooltip="Set the language the robot speaks and understands." id="5"><Choice value="Arabic" /><Choice value="Brazilian" /><Choice value="Chinese" /><Choice value="Czech" /><Choice value="Danish" /><Choice value="Dutch" /><Choice value="English" /><Choice value="Finnish" /><Choice value="French" /><Choice value="German" /><Choice value="Greek" /><Choice value="Italian" /><Choice value="Japanese" /><Choice value="Korean" /><Choice value="MandarinTaiwan" /><Choice value="Norwegian" /><Choice value="Polish" /><Choice value="Portuguese" /><Choice value="Russian" /><Choice value="Spanish" /><Choice value="Swedish" /><Choice value="Turkish" /></Parameter><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Intro_News" id="3" localization="8" tooltip="" x="256" y="268"><dialogFile>../Intro_News/Intro_News.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="category" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Box name="Find_News" id="4" localization="8" tooltip="" x="472" y="125"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[# coding=utf-8
# WIP: next news, nothing available

import sys
sys.path.append('/opt/Softbank Robotics/Choregraphe Suite 2.5/lib/python2.7/site-packages')
import requests
import random
import re

# using NEWS_API from: https://newsapi.org
# personal key for usage of newsapi.org
API_KEY = "6e84adc2475543d4b695ca01eddbb920"
# number of attempts allowed to be made to get news before giving up
ATTEMPTS = 3

class NoNews(Exception):
    pass

class NoTopic(Exception):
    pass

class NoSource(Exception):
    pass


def is_noun_from_tag(tag):
    return "k1" in tag


def case_from_tag(tag):
    return re.search("c([0-9])", tag).group(1)


def reformat_sentences(text):
    if re.search(u"<.>(.*)</.>", text):
        text = re.search(u"<.>(.*)</.>", text).group(1)
    elif re.search(u"<.>(.*)", text):
        text = re.search(u"<.>(.*)", text).group(1)
    if re.search(u"(.*[?.!]).*\u2026", text):
        text = re.search(u"(.*[?.!]).*\u2026", text).group(1)
    if re.search(u"(.*[?.]).*[.]{3}", text):
        text = re.search(u"(.*[?.]).*[.]{3}", text).group(1)
    return text


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.tts.setLanguage('Czech')

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, category):
        self.logger.debug("start")
        self.logger.info("category = {}".format(category))
        try:
            self.choose_news(category)
            tmp = (u"Na internetu píšou o " + self.get_main_topic()).encode('utf-8')
            self.logger.info("topic in vocal: {}".format(tmp))
            self.tts.say(tmp)
            self.logger.debug("successful")
        except NoNews:
            self.logger.error("cannot load news")
            #self.topic("NOTHING") #TODO
        except NoTopic:
            self.logger.error("cannot get topic")
            #self.topic("NOTHING") #TODO
        self.logger.debug("end")
        self.onFirstStop()

    def onInput_boxWhole(self):
        self.logger.debug("start whole news text processing")
        desc = self.get_news_desc()
        self.logger.info(desc.encode('utf-8'))
        source = self.get_source()
        try:
            tabletService = session.service("ALTabletService")
            tabletService.enableWifi()
            tabletService.showWebview(self.get_url_image())
        except Exception:
            self.logger.error("cannot display image with url {}".format(self.get_url_image()))
        if not source:
            self.tts.say((u"Píšou tohle. " + desc).encode('utf-8'))
        else:
            self.tts.say((u"Na webu {} píšou. {}".format(source, desc)).encode('utf-8'))
        self.logger.debug("end whole news text processing")
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def choose_news(self, category):
        url = ('http://newsapi.org/v2/top-headlines?'
                   'country=cz&'
                   'category={}&'
                   'apiKey={}'.format(category, API_KEY))
        self.logger.debug("url = {}".format(url))
        self.json = requests.get(url).json()
        if not self.json["articles"]:
            raise NoNews(url)
        for i in range(ATTEMPTS):
            self.number = random.randint(0, len(self.json["articles"]) - 1)
            if self.get_news()["description"]:
                break
        if not self.get_news()["description"]:
            raise NoNews

    def create_url(self, service, text):
        return u"https://nlp.fi.muni.cz/languageservices/service.py?call={}&lang=cs&output=json&text={}".format(service,text)

    # GETTERS

    def get_news(self):
        return self.json["articles"][self.number]

    def get_news_desc(self):
        return reformat_sentences(self.get_news()["description"])

    def get_source(self):
        try:
            tmp = self.json["articles"][self.number]["source"]["name"]
            self.logger.debug(tmp.encode('utf-8'))
            return tmp
        except KeyError:
            return ""

    def get_url_image(self):
        return self.get_news()["urlToImage"]

    # UTILITIES

    def test_membership(self, text):
        return requests.get(self.create_url("sholva", text)).json()

    def change_case(self, text, output_case, input_case=1, input_number=""):
        nlpurl = self.create_url("declension", text) + "&c1=c{}&c2=c{}&n=n{}".format(input_case, output_case, input_number)
        result = requests.get(nlpurl).json()
        self.logger.info(result.values())
        return result.values()[0]

    def get_main_phrases(self, text):
        nlpurl = self.create_url("phrases", text)
        return requests.get(nlpurl).json()

    def get_main_topic(self):
        nlpurl = self.create_url("topics", self.get_news_desc())
        topics = requests.get(nlpurl).json()
        try:
            topic = topics["response"][0]
            assert topic
        except:
            raise NoNews
        self.logger.info(topic.encode('utf-8'))
        phrase = self.get_main_phrases(topic)[0]
        input_number, input_case = re.search(u"k1.*n([A-Z])c(\d).*", phrase["Tag"]).groups()
        return self.change_case(phrase["Phrase"], 6, int(input_case), input_number)

    def cut_url(self):
        return self.get_news()["title"].split('-')[0]]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="boxWhole" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Output name="onFirstStop" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Output name="onError" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" /></Box><Box name="Additional_Info" id="6" localization="8" tooltip="An example of multilanguage dialog implementation" x="626" y="310"><dialogFile>../AdditionalInfo/AdditionalInfo.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="playAGame" type="1" type_size="1" nature="2" inner="0" tooltip="stimulated using $playAGame=1 in qiChat script when User wants to play a game&#x0A;" id="5" /><Output name="action" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Resource name="Speech" type="Lock" timeout="0" /><Resource name="Speech recognition" type="Lock" timeout="0" /></Box><Box name="Switch Case" id="7" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="817" y="315"><bitmap>media/images/box/interaction/choice.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("whole")):
			self.output_1(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]></content></script><pluginContent><keywords><keyword>&quot;whole&quot;</keyword><keyword></keyword></keywords></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" /><Input name="input" type="3" type_size="1" nature="1" inner="0" tooltip="" id="3" /><Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="4" /><Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" /></Box><Box name="Say" id="1" localization="8" tooltip="Say some text. The text can be localized." x="941" y="167"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Text" inherits_from_parent="0" content_type="5" value="Je mi líto, ale nemohl jsem nic najít." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" /><Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="6" /><Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" /><Link inputowner="4" indexofinput="4" outputowner="7" indexofoutput="5" /><Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="5" /><Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="4" indexofoutput="7" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="6" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>